/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunksaber"] = self["webpackChunksaber"] || []).push([["admin"],{

/***/ "./wwwroot/src/admin/index.js":
/*!************************************!*\
  !*** ./wwwroot/src/admin/index.js ***!
  \************************************/
/***/ (() => {

eval("ï»¿const admin = document.getElementById('admin');\r\nconst alertsRow = document.getElementById('alertsRow');\r\nconst annoucementElementAdmin = document.getElementById('annoucementAdmin');\r\n\r\nconst socketLabelAdmin = document.getElementById(\"socketLabelAdmin\");\r\n\r\nlet userComponent;\r\n\r\nconst init = () => {\r\n    const {\r\n        newSocketStatus,\r\n        currentUsers,\r\n        meetingStatus,\r\n        originVideoData,\r\n        serverVideoData,\r\n        errorMessage\r\n    } = getLocalStorageData();\r\n\r\n    if (errorMessage) {\r\n        createErrorAlert(errorMessage)\r\n    }\r\n\r\n    if (newSocketStatus) {\r\n        updateSocketStatusMsg(newSocketStatus);\r\n    }\r\n\r\n    if (meetingStatus) {\r\n        updateMeetingStatus(meetingStatus);\r\n    } else {\r\n        updateMeetingStatus('Waiting');\r\n    }\r\n\r\n    if (originVideoData && Object.keys(originVideoData).length > 0\r\n        || serverVideoData && Object.keys(serverVideoData).length > 0) {\r\n        const videoDataRow = document.createElement('div');\r\n        videoDataRow.classList.add('row');\r\n\r\n        if (originVideoData) {\r\n            let origVid = createOrigVidComponent(originVideoData);\r\n            videoDataRow.appendChild(origVid);\r\n        }\r\n\r\n        if (serverVideoData) {\r\n            let serVid = createSerVidComponent(serverVideoData);\r\n            videoDataRow.appendChild(serVid);\r\n        }\r\n\r\n        admin.appendChild(videoDataRow);\r\n    }\r\n\r\n    if (currentUsers && Object.keys(currentUsers).length > 0) {\r\n        const userRow = document.createElement('div');\r\n        userRow.classList.add('row');\r\n        let userComponent = createUserComponent();\r\n        let userTable = createUserTable(currentUsers);\r\n        userComponent.appendChild(userTable);\r\n        userRow.appendChild(userComponent);\r\n        admin.appendChild(userRow);\r\n    }\r\n}\r\n\r\nconst createErrorAlert = (errMsg) => {\r\n    const errCol = document.createElement('div');\r\n    errCol.classList.add('col', 'text-center');\r\n    const errAlert = document.createElement('div');\r\n    errAlert.classList.add('alert', 'alert-danger');\r\n    errAlert.setAttribute('role', 'alert');\r\n\r\n    const errHeader = createHeader(errMsg);\r\n    errHeader.classList.add('alert-heading');\r\n    errAlert.appendChild(errHeader);\r\n    errCol.appendChild(errAlert);\r\n    alertsRow.appendChild(errCol);\r\n}\r\n\r\nconst getLocalStorageData = () => {\r\n    let newSocketStatus = window.localStorage.getItem('websocket_status');\r\n    let currentUsers = JSON.parse(window.localStorage.getItem('current_users'));\r\n    let meetingStatus = window.localStorage.getItem('meeting_status');\r\n    let originVideoData = JSON.parse(window.localStorage.getItem('origin_video_data'));\r\n    let serverVideoData = JSON.parse(window.localStorage.getItem('server_video_data'));\r\n    let errorMessage = window.localStorage.getItem('error_message');\r\n\r\n    return { newSocketStatus, currentUsers, meetingStatus, originVideoData, serverVideoData, errorMessage };\r\n}\r\n\r\nconst updateSocketStatusMsg = (status) => {\r\n    const statusHeader = document.createElement('H5');\r\n    if (status === 'Open') {\r\n        statusHeader.classList.add('text-success');\r\n    }\r\n\r\n    if (status === 'Closed') {\r\n        statusHeader.classList.add('text-danger');\r\n    }\r\n\r\n    statusHeader.appendChild(document.createTextNode(status));\r\n    socketLabelAdmin.appendChild(statusHeader);\r\n}\r\n\r\nconst updateMeetingStatus = (status) => {\r\n    const statusHeader = document.createElement('H5');\r\n    if (status === 'Live') {\r\n        statusHeader.classList.add('text-success');\r\n    }\r\n\r\n    if (status === 'Ended') {\r\n        statusHeader.classList.add('text-danger');\r\n    }\r\n    statusHeader.appendChild(document.createTextNode(status));\r\n    annoucementElementAdmin.appendChild(statusHeader);\r\n}\r\n\r\nconst createHeader = (name) => {\r\n    let header = document.createElement('H4');\r\n    let headerText = document.createTextNode(name);\r\n    header.appendChild(headerText);\r\n\r\n    return header;\r\n}\r\n\r\nconst createUserComponent = () => {\r\n    userComponent = document.createElement('div');\r\n    userComponent.classList.add('col', 'text-center', 'shadow', 'rounded');\r\n\r\n    userComponent.appendChild(createHeader('Current Users'));\r\n\r\n    return userComponent;\r\n}\r\n\r\nconst createTableHeaders = (table, data) => {\r\n    let thead = table.createTHead();\r\n    let theadrow = thead.insertRow();\r\n    theadrow.classList.add('thead-dark');\r\n\r\n    Object.keys(data).forEach(key => {\r\n        let th = document.createElement('th');\r\n        let text = document.createTextNode(key);\r\n        th.appendChild(text);\r\n        theadrow.appendChild(th);\r\n    });\r\n\r\n    return thead;\r\n}\r\n\r\nconst createOrigVidComponent = (originVideoData) => {\r\n    let origVidComponent = document.createElement('div');\r\n    origVidComponent.classList.add('col', 'text-center', 'shadow', 'rounded');\r\n    origVidComponent.appendChild(createHeader('Original Video Data'));\r\n\r\n    let table = document.createElement('table');\r\n    table.classList.add('table', 'table-striped');\r\n\r\n    createTableHeaders(table, originVideoData);\r\n\r\n    let tbody = table.createTBody();\r\n    let bRow = tbody.insertRow();\r\n    for (let key in originVideoData) {\r\n        let cell = bRow.insertCell();\r\n        let text = document.createTextNode(originVideoData[key]);\r\n        cell.appendChild(text);\r\n    }\r\n\r\n    origVidComponent.appendChild(table);\r\n\r\n    return origVidComponent\r\n};\r\n\r\nconst createSerVidComponent = (serverVideoData) => {\r\n    let serverVidComponent = document.createElement('div');\r\n    serverVidComponent.classList.add('col', 'text-center', 'shadow', 'rounded');\r\n    serverVidComponent.appendChild(createHeader('Server Video Data'));\r\n\r\n    let table = document.createElement('table');\r\n    table.classList.add('table', 'table-striped');\r\n\r\n    createTableHeaders(table, serverVideoData);\r\n\r\n    let tbody = table.createTBody();\r\n    let bRow = tbody.insertRow();\r\n    for (let key in serverVideoData) {\r\n        let cell = bRow.insertCell();\r\n        let text = document.createTextNode(serverVideoData[key]);\r\n\r\n        if (typeof serverVideoData[key] === 'object') {\r\n           text = document.createTextNode(JSON.parse(serverVideoData[key]));\r\n        }\r\n\r\n        cell.appendChild(text);\r\n    }\r\n\r\n    serverVidComponent.appendChild(table);\r\n    return serverVidComponent; \r\n}\r\n\r\nconst createUserTable = (currentUsers) => {\r\n    let table = document.createElement('table');\r\n    table.classList.add('table', 'table-striped');\r\n\r\n    createTableHeaders(table, currentUsers[Object.keys(currentUsers)[0]]);\r\n\r\n    let tbody = table.createTBody();\r\n    for (let userName in currentUsers) {\r\n        let user = currentUsers[userName];\r\n        let bRow = tbody.insertRow();\r\n\r\n\r\n        let displayName = userName.toLocaleUpperCase();\r\n        if (user.userNumber === 1) {\r\n            displayName = displayName + '- [Host]';\r\n        }\r\n\r\n        let cell = bRow.insertCell();\r\n        let text = document.createTextNode(displayName);\r\n        cell.appendChild(text);\r\n\r\n        let cell1 = bRow.insertCell();\r\n        let text1 = document.createTextNode(user.userNumber);\r\n        cell1.appendChild(text1);\r\n\r\n        let cell2 = bRow.insertCell();\r\n        let text2 = document.createTextNode(user.startingPosition);\r\n        cell2.appendChild(text2);\r\n\r\n        let cell3 = bRow.insertCell();\r\n        let text3 = document.createTextNode(user.currentPosition);\r\n        cell3.appendChild(text3);\r\n    };\r\n\r\n    return table;\r\n};\r\n\r\nwindow.onload = init;\n\n//# sourceURL=webpack://saber/./wwwroot/src/admin/index.js?");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./wwwroot/src/admin/index.js"));
/******/ }
]);